plugins {
    id 'java'
    id 'eclipse'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'  //requires JDK11+
    id 'org.beryx.jlink' version '2.25.0'
}

wrapper {
    gradleVersion = '7.4.2'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'org.plateau.citygmleditor'
version = '1.0.0-SNAPSHOT'

ext {
    mainModuleName = 'CityGMLEditor'
    mainClassName = 'org.plateau.citygmleditor.citygmleditor.CityGMLEditorApp'
    launcherClassName = 'org.plateau.citygmleditor.citygmleditor.Launcher'
    javafxVersion = '17.0.2'  //requires JDK11+
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'org.citygml4j:citygml4j:2.12.0'
    implementation 'org.citygml4j.ade:iur-ade-citygml4j:1.4.2'
    
    implementation 'java3d:j3d-core-utils:1.3.1'

    implementation 'de.javagl:jgltf-model:2.0.3'
    implementation 'de.javagl:jgltf-model-builder:2.0.3'
    implementation 'de.javagl:jgltf-impl-v1:2.0.3'
    implementation 'de.javagl:jgltf-impl-v2:2.0.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.0'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
    implementation 'org.apache.commons:commons-math3:3.6.1'

    // https://mvnrepository.com/artifact/org.locationtech.jts/jts
    implementation group: 'org.locationtech.jts', name: 'jts-core', version: '1.19.0'

    // https://mvnrepository.com/artifact/org.osgeo/proj4j
    implementation group: 'org.osgeo', name: 'proj4j', version: '0.1.0'
    
    // https://mvnrepository.com/artifact/xerces/xercesImpl
    implementation ('xerces:xercesImpl:2.12.2') {
        exclude group: 'xml-apis', module: 'xml-apis'
    }

    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
}

compileJava {
    options.release = 11  //use JDK11+ for compiling & running
    options.encoding = 'UTF-8'
}

javafx {
    version = javafxVersion
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.graphics']
}

jar {
    manifest {
        attributes(
            'Main-Class': project.mainClassName,
            'JavaFX-Version': javafxVersion,
            'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
        )
    }
}

eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.find { it.path == 'src/main/java' }.output = 'bin/main'
                entries.forEach { entry ->
                    def entryIn = { it.find { file(entry.path).equals(it) } }
                    if (entry.kind == 'lib') {
                        entry.entryAttributes['test'] =
                            entryIn(configurations.testRuntimeClasspath) &&
                            !entryIn(configurations.runtimeClasspath)
                    }
                }
            }
        }
    }
}

application {
    mainModule = project.mainModuleName
    mainClass = project.mainClassName
    executableDir = ''
}

//main distribution generated would be platform-specific to the current OS
//hence the distribution's name should reflect that
distributions.main.distributionBaseName = project.name + '-' + javafx.platform.classifier

run {
    //args '...'
    //get system properties specified from the command line (for debugging, etc.)
    //and pass them on to the running application's JVM
    systemProperties = System.getProperties()

    debugOptions {
        enabled = false
        port = 5566
        server = true
        suspend = false
    }
}

//make an executable uber jar including all dependencies
//which should work only for current OS platform
task uberJar(type: Jar) {
    archiveClassifier = 'no-deps-' + javafx.platform.classifier
    with jar
    manifest {
        attributes(
            'Main-Class': project.launcherClassName,
            'JavaFX-Version': javafxVersion,
            'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy 'exclude'
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = project.mainModuleName
    }
}

