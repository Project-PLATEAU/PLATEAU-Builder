plugins {
    id 'base'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13' apply false //requires JDK11+
}

wrapper {
    gradleVersion = '7.4.2'
    distributionType = Wrapper.DistributionType.ALL
}

ext {
    mainModuleName = 'plateaubuilder.gui'
    mainClassName = 'org.plateaubuilder.gui.PLATEAUBuilderApp'
    launcherClassName = 'org.plateaubuilder.gui.Launcher'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.openjfx.javafxplugin'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        modularity.inferModulePath.set(false)
    }

    javafx {
        version = javafxVersion
        modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.graphics']
    }


    if (project.name != 'plateaubuilder-gui') {
        apply plugin: 'java-library'
//        apply plugin: 'maven-publish'
//        apply from: "$rootDir/gradle/publishing.gradle"
    }

    compileJava.options.encoding = 'UTF-8'

    eclipse {
        classpath {
            containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
            file {
                whenMerged {
                    entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                        it.entryAttributes['module'] = 'true'
                    }
                    entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                        it.entryAttributes['module'] = 'true'
                    }
                    entries.find { it.path == 'src/main/java' }.output = 'bin/main'
                    entries.forEach { entry ->
                        def entryIn = { it.find { file(entry.path).equals(it) } }
                        if (entry.kind == 'lib') {
                            entry.entryAttributes['test'] =
                                    entryIn(configurations.testRuntimeClasspath) &&
                                            !entryIn(configurations.runtimeClasspath)
                        }
                    }
                }
            }
        }
    }
}

//main distribution generated would be platform-specific to the current OS
//hence the distribution's name should reflect that
//distributions.main.distributionBaseName = project.name + '-' + javafx.platform.classifier
