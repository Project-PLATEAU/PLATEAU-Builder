plugins {
    id 'application'
    id 'org.beryx.jlink' version '2.25.0'
    id 'edu.sc.seis.launch4j' version '2.5.4'
}

ext {
    mainModuleName = 'plateaubuilder.gui'
    mainClassName = 'org.plateaubuilder.gui.PLATEAUBuilderApp'
    launcherClassName = 'org.plateaubuilder.gui.Launcher'
    javafxVersion = '17.0.10'  //requires JDK11+
    gdalInstallDir = 'C:/Program Files/GDAL' // GDALインストール先を指定
}

dependencies {
    implementation project(':plateaubuilder-core')
    implementation project(':plateaubuilder-validation')

    // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    implementation 'org.citygml4j:citygml4j:2.12.0'
    implementation 'org.citygml4j.ade:iur-ade-citygml4j:1.4.2'

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'java3d:j3d-core-utils:1.3.1'
    implementation 'org.locationtech.jts.io:jts-io-common:1.19.0'

    implementation 'de.javagl:jgltf-model:2.0.3'
    implementation 'de.javagl:jgltf-model-builder:2.0.3'
    implementation 'de.javagl:jgltf-impl-v1:2.0.3'
    implementation 'de.javagl:jgltf-impl-v2:2.0.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.0'

    // https://mvnrepository.com/artifact/org.locationtech.jts/jts
    implementation group: 'org.locationtech.jts', name: 'jts-core', version: '1.19.0'

    // https://mvnrepository.com/artifact/xerces/xercesImpl
    implementation ('xerces:xercesImpl:2.12.2') {
        exclude group: 'xml-apis', module: 'xml-apis'
    }

    implementation 'javax.vecmath:vecmath:1.5.2'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0-rc1'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation 'commons-io:commons-io:2.15.1'

    // https://mvnrepository.com/artifact/org.gdal/gdal
    implementation group: 'org.gdal', name: 'gdal', version: '3.8.0'
}

compileJava {
    options.release = 11
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'JavaFX-Version': javafxVersion,
                'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
                'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
        )
    }
}

application {
    mainModule = project.mainModuleName
    mainClass = project.mainClassName
    executableDir = ''
}

//main distribution generated would be platform-specific to the current OS
//hence the distribution's name should reflect that
distributions.main.distributionBaseName = project.name + '-' + javafx.platform.classifier

task copyGdalRuntime(type: Copy) {
    from "${gdalInstallDir}" // コピー元ディレクトリを指定
    into './gdal' // コピー先ディレクトリを指定
}

run {
    //args '...'
    //get system properties specified from the command line (for debugging, etc.)
    //and pass them on to the running application's JVM
//    systemProperties = System.getProperties()
    environment "PATH", System.getenv("PATH") + File.pathSeparator + "./gdal"

    debugOptions {
        enabled = false
        port = 5566
        server = true
        suspend = false
    }
}.dependsOn copyGdalRuntime

//make an executable uber jar including all dependencies
//which should work only for current OS platform
task uberJar(type: Jar) {
    archiveClassifier = 'no-deps-' + javafx.platform.classifier
    with jar
    manifest {
        attributes(
                'Main-Class': project.launcherClassName,
                'JavaFX-Version': javafxVersion,
                'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
                'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy 'exclude'
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = project.launcherClassName
    }
//    outputDir = file("build/image")

    mergedModule {
        uses 'javax.xml.bind.JAXBContextFactory'

        // `gradlew suggestMergedModuleInfo`の結果を記載(今後変わる可能性あり)
        requires 'com.google.gson';
        requires 'com.fasterxml.jackson.annotation';
        requires 'java.logging';
        requires 'com.sun.xml.xsom';
        requires 'java.scripting';
        requires 'java.sql';
        requires 'java.xml';
        requires 'com.sun.xml.txw2';
        requires 'java.desktop';
        requires 'java.datatransfer';
        requires 'java.compiler';
        requires 'com.sun.xml.fastinfoset';
        uses 'javax.json.spi.JsonProvider';
    }
}

tasks.createExe.dependsOn('uberJar')

launch4j() {
    mainClassName = project.mainClassName
    outputDir = './product/PLATEAUBuilder'
    // TODO: jar名変数化
    jar = '../../libs/plateaubuilder-gui-1.0.0-no-deps-win.jar'
//    headerType = 'console' // ログを確認したい場合は'console'に設定
    bundledJrePath = './image'
    bundledJre64Bit = true
    jvmOptions = [
            '-Djdk.tls.client.protocols=TLSv1,TLSv1.1,TLSv1.2',
    ]
}

// JREをコピー
task copyJre(type: Copy, dependsOn: ['jlink']) {
    from './build/image'
    into './build/product/PLATEAUBuilder/image'
}

task copyResources(dependsOn: ['copyLocater', 'copyGdalLib', 'copyGdalDirData', 'copyGdalDirProjlib', 'copyGdalDirLisense']) {
}

task copyLocater(type: Copy) {
    from 'src/main/resources/org/plateau/plateaubuilder/plateaubuilder/'
    include 'Locater*'
    into './build/product/PLATEAUBuilder/'
}

// gdalのライブラリをコピー
task copyGdalLib(type: Copy) {
    from "${gdalInstallDir}"
    include '*.dll'
    into './build/product/PLATEAUBuilder/'
}
task copyGdalDirData(type: Copy) {
    from "${gdalInstallDir}/gdal-data"
    into './build/product/PLATEAUBuilder/gdal/gdal-data'
}
task copyGdalDirProjlib(type: Copy) {
    from "${gdalInstallDir}/projlib"
    into './build/product/PLATEAUBuilder/gdal/projlib'
}
task copyGdalDirLisense(type: Copy) {
    from "${gdalInstallDir}/license"
    into './build/product/PLATEAUBuilder/gdal/license'
}

// exeファイル一式を`build/product/PLATEAUBuilder`に生成する
task deploy(dependsOn: [
        'uberJar',
        'jlink',
        'launch4j',
        'copyJre',
        'copyResources'
]) {}
